import { ReturnParserInstance } from "./parser.js";
export class AstBuilder extends ReturnParserInstance.getBaseCstVisitorConstructor() {
    constructor() {
        super();
        this.validateVisitor();
    }
    returnStatement(ctx) {
        return {
            type: "returnStatement",
            expression: this.visit(ctx.orExpression),
        };
    }
    orExpression(ctx) {
        let left = this.visit(ctx.lhs);
        if (!ctx.operator)
            return left;
        if (ctx.operator) {
            for (let i = 0; i < ctx.operator.length; i++) {
                left = {
                    type: "binaryOperator",
                    operator: ctx.operator[i].image,
                    lhs: left,
                    rhs: this.visit(ctx.rhs[i]),
                };
            }
        }
        return left;
    }
    andExpression(ctx) {
        let left = this.visit(ctx.lhs);
        if (!ctx.operator)
            return left;
        if (ctx.operator) {
            for (let i = 0; i < ctx.operator.length; i++) {
                left = {
                    type: "binaryOperator",
                    operator: ctx.operator[i].image,
                    lhs: left,
                    rhs: this.visit(ctx.rhs[i]),
                };
            }
        }
        return left;
    }
    notExpression(ctx) {
        if (ctx.operator) {
            return {
                type: "notOperator",
                operator: ctx.operator[0].image,
                expression: this.visit(ctx.parentheisizedExpression),
            };
        }
        return this.visit(ctx.primaryExpression);
    }
    primaryExpression(ctx) {
        if (ctx.parentheisizedExpression) {
            return this.visit(ctx.parentheisizedExpression);
        }
        if (ctx.atomicCustomExpression) {
            return this.visit(ctx.atomicCustomExpression);
        }
        throw new Error("Invalid primary expression");
    }
    parentheisizedExpression(ctx) {
        return this.visit(ctx.returnStatement);
    }
    atomicCustomExpression(ctx) {
        if (ctx.rhs) {
            return {
                type: "customBinaryFunction",
                customFunction: ctx.function[0].image,
                lhs: this.visitIdentifier(ctx.lhs[0]),
                rhs: this.visitIdentifier(ctx.rhs[0]),
            };
        }
        return {
            type: "customUniaryFunction",
            customFunction: ctx.function[0].image,
            expression: this.visitIdentifier(ctx.lhs[0]),
        };
    }
    visitIdentifier(token) {
        return {
            type: "identifier",
            name: token.image,
        };
    }
}
export function buildAst(cst) {
    const astBuilder = new AstBuilder();
    return astBuilder.visit(cst);
}
