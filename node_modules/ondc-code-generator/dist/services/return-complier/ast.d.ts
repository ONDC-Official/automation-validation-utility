import { CstNode } from "chevrotain";
export interface AstNode {
    type: "returnStatement" | "binaryOperator" | "notOperator" | "customBinaryFunction" | "customUniaryFunction" | "identifier";
}
export interface ReturnStatementNode extends AstNode {
    expression: AstNode;
}
export interface BinaryOperatorNode extends AstNode {
    operator: "&&" | "||";
    lhs: AstNode;
    rhs: AstNode;
}
export interface NotOperatorNode extends AstNode {
    operator: "!";
    expression: AstNode;
}
export interface CustomBinaryFunction extends AstNode {
    customFunction: string;
    lhs: IdentifierNode;
    rhs: IdentifierNode;
}
export interface CustomUniaryFunction extends AstNode {
    customFunction: string;
    expression: IdentifierNode;
}
export interface IdentifierNode extends AstNode {
    name: string;
}
declare const AstBuilder_base: new (...args: any[]) => import("chevrotain").ICstVisitor<any, any>;
export declare class AstBuilder extends AstBuilder_base {
    constructor();
    returnStatement(ctx: any): ReturnStatementNode;
    orExpression(ctx: any): BinaryOperatorNode | AstNode;
    andExpression(ctx: any): BinaryOperatorNode | AstNode;
    notExpression(ctx: any): NotOperatorNode | AstNode;
    primaryExpression(ctx: any): ReturnStatementNode | CustomBinaryFunction | CustomUniaryFunction;
    parentheisizedExpression(ctx: any): ReturnStatementNode;
    atomicCustomExpression(ctx: any): CustomBinaryFunction | CustomUniaryFunction;
    visitIdentifier(token: any): IdentifierNode;
}
export declare function buildAst(cst: CstNode): AstNode;
export {};
