import { TestObjectSyntax } from "../../../constants/syntax.js";
import { TestObjectValidator, } from "../abstract-validator.js";
import { RequiredFieldsValidator, NameValidator, ScopeValidator, ErrorCodeValidator, VariableValidator, ContinueValidator, ReturnValidator, } from "./sub-validations.js";
export class CompleteTestObjectValidator extends TestObjectValidator {
    constructor(testObject, path, dependencies) {
        super(testObject, path);
        this.validate = async () => {
            await new RequiredFieldsValidator(this.targetObject, this.validationPath).validate();
            await new NameValidator(this.targetObject, this.validationPath).validate();
            if (this.targetObject[TestObjectSyntax.Scope]) {
                await new ScopeValidator(this.targetObject, this.validationPath, this.dependencies.stringJsonPaths, this.dependencies.minimal).validate();
            }
            if (this.targetObject[TestObjectSyntax.ErrorCode]) {
                await new ErrorCodeValidator(this.targetObject, this.validationPath, this.dependencies.errorDefinitions, this.dependencies.minimal).validate();
            }
            await new VariableValidator(this.targetObject, this.validationPath, this.dependencies.stringJsonPaths, this.dependencies.externalVariables, this.dependencies.minimal).validate();
            if (this.targetObject[TestObjectSyntax.Continue]) {
                await new ContinueValidator(this.targetObject, this.validationPath).validate();
            }
            await new ReturnValidator(this.targetObject, this.validationPath, this.dependencies).validate();
        };
        this.dependencies = dependencies;
    }
}
