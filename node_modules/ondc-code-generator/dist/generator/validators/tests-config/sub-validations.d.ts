import { TestObject } from "../../../types/config-types.js";
import { ErrorDefinition } from "../../../types/error-codes.js";
import { TestObjectValidator, TestsValidatorDependencies } from "../abstract-validator.js";
export declare class RequiredFieldsValidator extends TestObjectValidator {
    validate: () => Promise<void>;
}
export declare class NameValidator extends TestObjectValidator {
    validate: () => Promise<void>;
}
export declare class ScopeValidator extends TestObjectValidator {
    impossiblePaths: string[];
    minimal: boolean;
    constructor(testObject: TestObject, path: string, impossiblePaths: string[], minimal?: boolean);
    validate: () => Promise<void>;
}
export declare class ErrorCodeValidator extends TestObjectValidator {
    possibleErrorCodes: ErrorDefinition[];
    minimal: boolean;
    constructor(testObject: TestObject, path: string, possibleErrorCodes: ErrorDefinition[], minimal?: boolean);
    validate: () => Promise<void>;
}
export declare class VariableValidator extends TestObjectValidator {
    possibleJsonPaths: string[];
    externalVariables: string[];
    minimal: boolean;
    constructor(testObject: TestObject, path: string, posibleJsonPaths: string[], externalVariables: string[], minimal?: boolean);
    validate: () => Promise<void>;
    validateKey(key: string): void;
    validateExternalData(path: string, definedExternalValues: string[]): void;
}
export declare class ContinueValidator extends TestObjectValidator {
    definedVariables: string[];
    constructor(testObject: TestObject, path: string);
    validate: () => Promise<void>;
}
export declare class ReturnValidator extends TestObjectValidator {
    definedVariables: string[];
    dependencies: TestsValidatorDependencies;
    constructor(testObject: TestObject, path: string, dependencies: TestsValidatorDependencies);
    validate: () => Promise<void>;
}
