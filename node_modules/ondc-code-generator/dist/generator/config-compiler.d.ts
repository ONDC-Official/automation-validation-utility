import { JSONSchema7 } from "json-schema";
import { BUILD_TYPE } from "../types/build.js";
import { ErrorDefinition } from "../types/error-codes.js";
import { ValidationConfig } from "../types/config-types.js";
import { SupportedLanguages } from "../types/compiler-types.js";
type CodeGeneratorConfig = {
    removeRequiredFromSchema: boolean;
    removeEnumsFromSchema: boolean;
    duplicateVariablesInChildren: boolean;
};
export declare class ConfigCompiler {
    buildData: BUILD_TYPE | undefined;
    jsonSchemas: Record<string, JSONSchema7> | undefined;
    possibleJsonPaths: Record<string, string[]> | undefined;
    errorDefinitions: ErrorDefinition[] | undefined;
    generatorConfig: CodeGeneratorConfig | undefined;
    language: SupportedLanguages;
    private SchemaExtractionService;
    constructor(language: SupportedLanguages);
    initialize: (buildYaml: string, generatorConfig?: Partial<CodeGeneratorConfig>) => Promise<void>;
    performValidations: (valConfig: ValidationConfig) => Promise<void>;
    withMinimalValidations: (valConfig: ValidationConfig) => Promise<void>;
    generateCode: (valConfig: ValidationConfig, codeName?: string, minimal?: boolean, outputPath?: string) => Promise<void>;
    generateL0Schema: () => Promise<void>;
    generateValidPaths: () => Promise<Record<string, string[]>>;
}
export {};
