export var TestObjectSyntax;
(function (TestObjectSyntax) {
    TestObjectSyntax["Name"] = "_NAME_";
    TestObjectSyntax["Return"] = "_RETURN_";
    TestObjectSyntax["Scope"] = "_SCOPE_";
    TestObjectSyntax["Continue"] = "_CONTINUE_";
    TestObjectSyntax["ErrorCode"] = "_ERROR_CODE_";
    TestObjectSyntax["SuccessCode"] = "_SUCCESS_CODE_";
    TestObjectSyntax["Description"] = "_DESCRIPTION_";
})(TestObjectSyntax || (TestObjectSyntax = {}));
export const ExternalDataSyntax = "_EXTERNAL";
export var ConfigSyntax;
(function (ConfigSyntax) {
    ConfigSyntax["Tests"] = "_TESTS_";
    ConfigSyntax["SessionData"] = "_SESSION_DATA_";
})(ConfigSyntax || (ConfigSyntax = {}));
export const ConfigKeyWords = [
    TestObjectSyntax.Name,
    TestObjectSyntax.Return,
    TestObjectSyntax.Scope,
    TestObjectSyntax.Continue,
    TestObjectSyntax.ErrorCode,
    TestObjectSyntax.SuccessCode,
    ConfigSyntax.Tests,
    ConfigSyntax.SessionData,
];
// JavaScript/Node.js keywords
export const nodeReservedKeywords = new Set([
    "break",
    "case",
    "catch",
    "class",
    "const",
    "continue",
    "debugger",
    "default",
    "delete",
    "do",
    "else",
    "export",
    "extends",
    "finally",
    "for",
    "function",
    "if",
    "import",
    "in",
    "instanceof",
    "let",
    "new",
    "return",
    "super",
    "switch",
    "this",
    "throw",
    "try",
    "typeof",
    "var",
    "void",
    "while",
    "with",
    "yield",
    // Additional Node.js/ECMAScript-specific keywords
    "async",
    "await",
    "arguments",
    "eval",
    "of",
    // Reserved but may not yet be used in JavaScript
    "enum",
    "implements",
    "interface",
    "package",
    "private",
    "protected",
    "public",
    "static",
]);
